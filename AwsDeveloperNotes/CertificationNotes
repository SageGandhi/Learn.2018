============================================================================01:Billing Organization============================================================================
https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/consolidated-billing.html:
Aws Provided Account & Amazon Internet Services Private Limited Provided Account[Based On Indian Address].Payer Account & Linked Account.When you used consolidated billing in 
the Billing and Cost Management console, you had one account that was designated as a payer account.The payer account paid the charges that were accrued by all the other 
accounts, known as linked accounts, in your consolidated billing family.The same idea applies to AWS Organizations: Each organization has one account, called a master account,
that pays the charges of all the member accounts in that organization.The member accounts are linked to the master account for billing purposes, just like the linked accounts 
in consolidated billing were linked to a payer account.
============================================================================02:Identity&Access Management======================================================================
Iam[Identity&Access Management] Follows/Adheres To Payment Card Industry (PCI) Data Security Standard(DSS).
============================================================================03:Simple Notification Service=====================================================================
https://docs.aws.amazon.com/sns/latest/dg/json-formats.html#http-notification-json
Sns[Simple Notification Service]:Headers:
POST / HTTP/1.1[Message Will Be Post]
x-amz-sns-message-type: Notification/SubscriptionConfirmation/UnsubscribeConfirmation[Type Of Message]
x-amz-sns-message-id: 165545c9-2a5c-472c-8df2-7ff2be2b3b1b[Unique Mesage Identifier]
x-amz-sns-topic-arn: arn:aws:sns:us-west-2:123456789012:MyTopic[Topic Arn Where Message Is Published To]
x-amz-sns-subscription-arn: arn:aws:sns:us-west-2:123456789012:MyTopic:2bcfbf39-05c3-41de-beaa-fcfcc21c8f55[Arn For Subscription]
User-Agent: Amazon Simple Notification Service Agent
For SubscriptionConfirmation:
{
"Type" : "SubscriptionConfirmation",--Type Of The Message
"MessageId" : "165545c9-2a5c-472c-8df2-7ff2be2b3b1b",--Unique Identifier,Same Id Is Used When Retry

--Value To Use Wirh ConfirmSubscription
"Token" : "2336412f37fb687f5d51e6e241d09c805a5a57b30d712f794cc5f6a988666d92768dd60a747ba6f3beb71854e285d6ad02428b09ceece29417f1f02d609c582afbacc99c583a916b9981dd2728f4ae6fdb82efd087cc3b7849e05798d2d2785c03b0879594eeac82c01f235d0e717736",
"TopicArn" : "arn:aws:sns:us-west-2:123456789012:MyTopic",--Arn Of The Topic This Endpoint Subscribed To

--Describe The Message
"Message" : "You have chosen to subscribe to the topic arn:aws:sns:us-west-2:123456789012:MyTopic.\nTo confirm the subscription, visit the SubscribeURL included in this message.",

--Url To Visit To ConfirmSubscription
"SubscribeURL" : "https://sns.us-west-2.amazonaws.com/?Action=ConfirmSubscription&TopicArn=arn:aws:sns:us-west-2:123456789012:MyTopic&Token=2336412f37fb687f5d51e6e241d09c805a5a57b30d712f794cc5f6a988666d92768dd60a747ba6f3beb71854e285d6ad02428b09ceece29417f1f02d609c582afbacc99c583a916b9981dd2728f4ae6fdb82efd087cc3b7849e05798d2d2785c03b0879594eeac82c01f235d0e717736",
"Timestamp" : "2012-04-26T20:45:04.751Z",--When Subscription Confirmation Sent
"SignatureVersion" : "1",--Version Of Amazon Sns Signature Used

--Base64-Encoded "SHA1withRSA" Signature Of The Message, MessageId, Type, Timestamp, TopicArn Values.
"Signature" : "EXAMPLEpH+DcEwjAPg8O9mY8dReBSwksfg2S7WKQcikcNKWLQjwu6A4VbeS0QHVCkhRS7fUQvi2egU3N858fiTDN6bkkOxYDVrY0Ad8L10Hs3zH81mtnPk5uvvolIC1CXGu43obcgFxeL3khZl8IKvO61GWB6jI9b5+gLPoBc1Q=",

--Url To The Certificate Used To Sign This Message
"SigningCertURL" : "https://sns.us-west-2.amazonaws.com/SimpleNotificationService-f3ecfb7224c7233fe7bb5f59f96de52f.pem"
}
HTTP/HTTPS Notification JSON Format:
POST / HTTP/1.1
x-amz-sns-message-type: Notification
x-amz-sns-message-id: 22b80b92-fdea-4c2c-8f9d-bdfb0c7bf324
x-amz-sns-topic-arn: arn:aws:sns:us-west-2:123456789012:MyTopic
x-amz-sns-subscription-arn: arn:aws:sns:us-west-2:123456789012:MyTopic:c9135db0-26c4-47ec-8998-413945fb5a96
User-Agent: Amazon Simple Notification Service Agent
{
"Type" : "Notification",--Type Of The Message
"MessageId" : "22b80b92-fdea-4c2c-8f9d-bdfb0c7bf324",--Unique Identifier,Same Id Is Used When Retry
"TopicArn" : "arn:aws:sns:us-west-2:123456789012:MyTopic",--Arn Of The Topic This Endpoint Subscribed To
"Subject" : "My First Message",--Subject Of The Message Optional
"Message" : "Hello world!",--Describe The Message
"Timestamp" : "2012-05-02T00:54:06.655Z",--When Notification Published
"SignatureVersion" : "1",--Version Of Amazon Sns Signature Used
--Base64-Encoded "SHA1withRSA" Signature Of The Message, MessageId, Subject (If Present), Type, Timestamp, TopicArn Values.
"Signature" : "EXAMPLEw6JRNwm1LFQL4ICB0bnXrdB8ClRMTQFGBqwLpGbM78tJ4etTwC5zU7O3tS6tGpey3ejedNdOJ+1fkIp9F2/LmNVKb5aFlYq+9rk9ZiPph5YlLmWsDcyC5T+Sy9/umic5S0UQc2PEtgdpVBahwNOdMW4JPwk0kAJJztnc=",
--Url To The Certificate Used To Sign This Message
"SigningCertURL" : "https://sns.us-west-2.amazonaws.com/SimpleNotificationService-f3ecfb7224c7233fe7bb5f59f96de52f.pem",
--To Unsubscribe From This Topic
"UnsubscribeURL" : "https://sns.us-west-2.amazonaws.com/?Action=Unsubscribe&SubscriptionArn=arn:aws:sns:us-west-2:123456789012:MyTopic:c9135db0-26c4-47ec-8998-413945fb5a96"
}
HTTP/HTTPS Unsubscribe Confirmation JSON Format
POST / HTTP/1.1
x-amz-sns-message-type: UnsubscribeConfirmation
x-amz-sns-message-id: 47138184-6831-46b8-8f7c-afc488602d7d
x-amz-sns-topic-arn: arn:aws:sns:us-west-2:123456789012:MyTopic
x-amz-sns-subscription-arn: arn:aws:sns:us-west-2:123456789012:MyTopic:2bcfbf39-05c3-41de-beaa-fcfcc21c8f55
User-Agent: Amazon Simple Notification Service Agent
{
"Type" : "UnsubscribeConfirmation",
"MessageId" : "47138184-6831-46b8-8f7c-afc488602d7d",
"Token" : "2336412f37fb687f5d51e6e241d09c805a5a57b30d712f7948a98bac386edfe3e10314e873973b3e0a3c09119b722dedf2b5e31c59b13edbb26417c19f109351e6f2169efa9085ffe97e10535f4179ac1a03590b0f541f209c190f9ae23219ed6c470453e06c19b5ba9fcbb27daeb7c7",
"TopicArn" : "arn:aws:sns:us-west-2:123456789012:MyTopic",
"Message" : "You have chosen to deactivate subscription arn:aws:sns:us-west-2:123456789012:MyTopic:2bcfbf39-05c3-41de-beaa-fcfcc21c8f55.\nTo cancel this operation and restore the subscription, visit the SubscribeURL included in this message.",
"SubscribeURL" : "https://sns.us-west-2.amazonaws.com/?Action=ConfirmSubscription&TopicArn=arn:aws:sns:us-west-2:123456789012:MyTopic&Token=2336412f37fb687f5d51e6e241d09c805a5a57b30d712f7948a98bac386edfe3e10314e873973b3e0a3c09119b722dedf2b5e31c59b13edbb26417c19f109351e6f2169efa9085ffe97e10535f4179ac1a03590b0f541f209c190f9ae23219ed6c470453e06c19b5ba9fcbb27daeb7c7",
"Timestamp" : "2012-04-26T20:06:41.581Z",
"SignatureVersion" : "1",
--Base64-Encoded "SHA1withRSA" Signature Of The Message, MessageId, Type, Timestamp,TopicArn Values.
"Signature" : "EXAMPLEHXgJmXqnqsHTlqOCk7TIZsnk8zpJJoQbr8leD+8kAHcke3ClC4VPOvdpZo9s/vR9GOznKab6sjGxE8uwqDI9HwpDm8lGxSlFGuwCruWeecnt7MdJCNh0XK4XQCbtGoXB762ePJfaSWi9tYwzW65zAFU04WkNBkNsIf60=",
"SigningCertURL" : "https://sns.us-west-2.amazonaws.com/SimpleNotificationService-f3ecfb7224c7233fe7bb5f59f96de52f.pem"
}
============================================================================04:Simple Notification Service=====================================================================
When Amazon SNS sends a Notification to a subscribed HTTP or HTTPS endpoint, the POST message sent to the endpoint has a message body that contains a JSON document with the 
following name/value pairs:Message/MessageId/Signature/SignatureVersion/SigningCertURL/Subject[Optional]/Timestamp/TopicArn/Type/UnsubscribeURL.
============================================================================05:Identity&Access Management======================================================================
Names Of IAM User Will Not Contain #.Names of users, groups, roles, policies, instance profiles, and server certificates must be alphanumeric, including the following common 
characters: plus (+), equal (=), comma (,), period (.), at (@), underscore (_), and hyphen (-).https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html
============================================================================06:Identity&Access Management======================================================================
https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html: 
Imagine that you are creating a mobile app that accesses AWS resources, such as a game that runs on a mobile device and stores player and score information using Amazon S3 and 
DynamoDB.When you write such an app, you'll make requests to AWS services that must be signed with an AWS access key. However, we strongly recommend that you do not embed or 
distribute long-term AWS credentials with apps that a user downloads to a device, even in an encrypted store. Instead, build your app so that it requests temporary AWS security
credentials dynamically when needed using web identity federation. The supplied temporary credentials map to an AWS role that has only the permissions needed to perform the 
tasks required by the mobile app.With web identity federation, you don't need to create custom sign-in code or manage your own user identities. Instead, users of your app can 
sign in using a well-known identity provider (IdP) —such as Login with Amazon, Facebook, Google, or any other OpenID Connect (OIDC)-compatible IdP, receive an authentication 
token, and then exchange that token for temporary security credentials in AWS that map to an IAM role with permissions to use the resources in your AWS account. Using an IdP 
helps you keep your AWS account secure, because you don't have to embed and distribute long-term security credentials with your application.For most scenarios, we recommend 
that you use Amazon Cognito because it acts as an identity broker and does much of the federation work for you. For details, see the following section, Using Amazon Cognito 
for Mobile Apps.If you don't use Amazon Cognito, then you must write code that interacts with a web IdP (Login with Amazon, Facebook, Google, or any other OIDC-compatible IdP) 
and then calls the AssumeRoleWithWebIdentity API to trade the authentication token you get from those IdPs for AWS temporary security credentials. If you have already used 
this approach for existing apps, you can continue to use it.
============================================================================07:Relational Database Service=====================================================================
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#Overview.Tagging: Tags Are Used For Billing Purpose.Each Amazon RDS resource has a tag set, which 
contains all the tags that are assigned to that Amazon RDS resource. A tag set can contain as many as 10 tags, or it can be empty. If you add a tag to an Amazon RDS resource 
that has the same key as an existing tag on resource, the new value overwrites the old value.
============================================================================08:Elastic Compute Cloud===========================================================================
For Specific Amazon Machine Image Root Device Type Can Be Amazon EBS-backed AMI[ebs]/instance store-backed AMI[instance store].
EC2-Classic: We release the public and private IPv4 addresses for the instance when you stop the instance, and assign new ones when you restart it.EC2-VPC: The instance 
retains its private IPv4 addresses and any IPv6 addresses when stopped and restarted. We release the public IPv4 address and assign a new one when you restart it.

EC2-Classic: We disassociate any Elastic IP address that's associated with the instance. You're charged for Elastic IP addresses that aren't associated with an instance. 
When you restart the instance, you must associate the Elastic IP address with the instance; we don't do this automatically.EC2-VPC: The instance retains its associated 
Elastic IP addresses. You're charged for any Elastic IP addresses associated with a stopped instance.
============================================================================09:DynamoDB=======================================================================================
DynamoDB Supports Web Identity Federation Using Facebook,Google,Amazon As Identity Provider To request temporary security credentials.
============================================================================10:Elastic Compute Cloud==========================================================================
Billing commences when Amazon EC2 initiates the boot sequence of an AMI instance. Billing ends when the instance terminates, which could occur through a web services command, 
by running "shutdown -h", or through instance failure. When you stop an instance, we shut it down but don't charge hourly usage for a stopped instance, or data transfer fees, 
but we do charge for the storage for any Amazon EBS volumes.
============================================================================11:DynamoDB=======================================================================================
Every global secondary index must have a partition key, and can have an optional sort key. The index key schema can be different from the base table schema; you could have a 
table with a simple primary key (partition key), and create a global secondary index with a composite primary key (partition key and sort key) — or vice-versa. The index key 
attributes can consist of any top-level String, Number, or Binary attributes from the base table; other scalar types, document types, and set types are not allowed.
============================================================================12:Elastic Compute Cloud==========================================================================
curl http://169.254.169.254/latest/user-data|curl http://169.254.169.254/latest/meta-data:instance metadata Will contain different categories & only available from instance:
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-categories[local-ipv4:The private IPv4 address of the instance. In cases where 
multiple network interfaces are present, this refers to the eth0 device (the device for which the device number is 0),public-ipv4:The public IPv4 address. If an Elastic IP 
address is associated with the instance, the value returned is the Elastic IP address.]
============================================================================12:SimpleQueueService=============================================================================
https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_Operations.html:
AddPermission
ChangeMessageVisibility
ChangeMessageVisibilityBatch
CreateQueue
DeleteMessage
DeleteMessageBatch
DeleteQueue
GetQueueAttributes
GetQueueUrl
ListDeadLetterSourceQueues
ListQueues
ListQueueTags
PurgeQueue
ReceiveMessage
RemovePermission
SendMessage
SendMessageBatch
SetQueueAttributes
TagQueue
UntagQueue
============================================================================13:Simple Notification Service====================================================================
In order for customers to have broad flexibility of delivery mechanisms, Amazon SNS supports notifications over multiple transport protocols. Customers can select one the following transports as part of the subscription requests:
“HTTP”, “HTTPS” – Subscribers specify a URL as part of the subscription registration; notifications will be delivered through an HTTP POST to the specified URL.
”Email”, “Email-JSON” – Messages are sent to registered addresses as email. Email-JSON sends notifications as a JSON object, while Email sends text-based email.
“SQS” – Users can specify an SQS standard queue as the endpoint; Amazon SNS will enqueue a notification message to the specified queue (which subscribers can then process 
using SQS APIs such as ReceiveMessage, DeleteMessage, etc.). Note that FIFO queues are not currently supported.
“SMS” – Messages are sent to registered phone numbers as SMS text messages.
============================================================================14:OpsWorks Vs CloudFormation Vs Elastic BeanStalk================================================
With Elastic Beanstalk, you can quickly deploy and manage applications in the AWS Cloud without worrying about the infrastructure that runs those applications. AWS Elastic 
Beanstalk reduces management complexity without restricting choice or control. You simply upload your application, and Elastic Beanstalk automatically handles the details of 
capacity provisioning, load balancing, scaling, and application health monitoring. Elastic Beanstalk supports applications developed in Java, PHP, .NET, Node.js, Python, and 
Ruby, as well as different container types for each language. A container defines the infrastructure and software stack to be used for a given environment. When you deploy your
application, Elastic Beanstalk provisions one or more AWS resources, such as Amazon EC2 instances. The software stack that runs on your Amazon EC2 instances depends on the 
container type. AWS Elastic Beanstalk stores your application files and, optionally, server log files in Amazon S3. If you are using the AWS Management Console, the AWS Toolkit
for Visual Studio, or AWS Toolkit for Eclipse, an Amazon S3 bucket will be created in your account for you and the files you upload will be automatically copied from your local
client to Amazon S3. Optionally, you may configure Elastic Beanstalk to copy your server log files every hour to Amazon S3. You do this by editing the environment configuration
settings.

AWS OpsWorks is a configuration management service that provides managed instances of Chef and Puppet. Chef and Puppet are automation platforms that allow you to use code to 
automate the configurations of your servers. OpsWorks lets you use Chef and Puppet to automate how servers are configured, deployed, and managed across your Amazon EC2 instances
or on-premises compute environments. OpsWorks has three offerings, AWS Opsworks for Chef Automate, AWS OpsWorks for Puppet Enterprise, and AWS OpsWorks Stacks.

AWS CloudFormation makes deploying a set of Amazon Web Services (AWS) resources as simple as submitting a template. A template is a simple text file that describes a stack, a 
collection of AWS resources you want to deploy together as a group. You use the template to define all the AWS resources you want in your stack. This can include Amazon 
Elastic Compute Cloud instances, Amazon Relational Database Service DB Instances, and other resources.CloudFormation also supports OpsWorks and OpsWorks components (stacks, 
layers, instances, and applications) can be modeled inside CloudFormation templates, and provisioned as CloudFormation stacks.CloudFormation supports Elastic Beanstalk 
application environments as one of the AWS resource types.
============================================================================14:Glacier Usage===================================================================================
For Active Database Storage Use Relational Database Service[RDS]/Elastic Block Storage[EBS].For Frequenctly Accessible Data Use Simple Storage Service[S3] Or Elastic Block 
Storage[EBS].For Cached Session Data Use ElasticCache.Use Glacier For InFrequently Access Data & Data Archive.
============================================================================15:DynamoDB Global Secondary Index=================================================================
Only Global Secondary Index In DynamoDB Can Be Modified After Creation.
============================================================================16:Glacier Usage===================================================================================
https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-data-model.html: 
Vault[container for storing archives.Within a Region,an account must use unique vault names,Uri:https://<region-specific endpoint>/<account-id>/vaults/<vaultname>].

Archive[An archive can be any data with an ID,Uri:https://<region-specific endpoint>/<account-id>/vaults/<vault-name>/archives/<archive-id>.can store an unlimited number of 
archives in a vault].

Job[Amazon Glacier jobs can perform a select query on an archive, retrieve an archive, or get an inventory of a vault. When performing a query on an archive, you initiate a 
job providing a SQL query and list of Amazon Glacier archive objects. Amazon Glacier Select runs the query in place and writes the output results to Amazon S3.Retrieving an 
archive and vault inventory (list of archives) are asynchronous operations in Amazon Glacier in which you first initiate a job, and then download the job output after Amazon 
Glacier completes the job.Uri:https://<region-specific endpoint>/<account-id>/vaults/<vault-name>/jobs/<job-id>]

Notification Configuration.Because jobs take time to complete, Amazon Glacier supports a notification mechanism to notify you when a job is complete. You can configure a vault
to send notification to an Amazon Simple Notification Service topic when jobs complete. You can specify one SNS topic per vault in the notification configuration.
https://<region-specific endpoint>/<account-id>/vaults/<vault-name>/notification-configuration Per vault.
============================================================================17:Elastic  BeanStalk===============================================================================
AWS Elastic Beanstalk uses proven AWS features and services, such as Amazon EC2, Amazon RDS, Elastic Load Balancing, Auto Scaling, Amazon S3, and Amazon SNS, to create an 
environment that runs your application. The current version of AWS Elastic Beanstalk uses the Amazon Linux AMI or the Windows Server 2012 R2 AMI.