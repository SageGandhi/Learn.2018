Module Is Single JavaScript File,Package Is Collection Of Modules In Directory Structure.Package.json Contains MetaData Of The Package.Npm Works With Packages.Node Package Manager.Clone A Popular Node 
Package From GitHub[https://github.com/lodash/lodash.git] Using [git clone https://github.com/lodash/lodash].Npm Install Will Install Any Dependencies Given In The Package.json File.Npm Install Will 
Download All Dependencies Maintained In Package.json File[cd .\lodash\ & npm install].If Package.json Contains Script Section,We Can Do npm <Script Section Key>.In IoDash We Have  Following Keys:"scripts":
"build","build:fp""build:fp-modules","build:main","build:main-modules","doc","doc:fp","doc:site","doc:sitehtml","pretest","style","test","test:doc","test:fp","test:main","validate".Ex.We Can Run npm test 
Same As npm run-script test.For Help:npm <Command> -h Gives Command Line Help,Browser Based Command npm help <Command>.Also To Search A Command Help Associated With Specfic KeyWord:npm help-search <Specfic
KeyWord> --long.For All Shorthand Command Visit:https://docs.npmjs.com/misc/config.

Creating Package.json:npm init To Initialize.Provide Any Values[Although Does Not Matter].Make A Directory First[mkdir MyFirstNpmPackage,cd .\MyFirstNpmPackage\],Like First Package Json Create As 
Description,Git Repository: https://github.com/SageGandhi/.We Can Set Default Value As In https://docs.npmjs.com/misc/config [init-author-name,init-author-email,init-author-url,init-license].To Set It Use 
npm set init-author-name 'Prajit Gandhi'.To Get Value For Specfic Property Use npm get init-author-name & To Delete Use npm config delete init-author-name.npm set===npm config set & npm get===npm config get.
All These Settings Are Kept In .npmrc File.To Save Dependencies In Package.json While Installing Packages Using --save Flag[npm install lodash --save].But If This Dependencies Are Only For Local Development
/Testing Not For Production,Then We Use --save-dev Flag[Added To devDependencies Section].Like For Unit Testing Framework Use DevDependencies.

For List Out All The Dependency Use npm list [--depth <Depth>][--global For Globally Installed Package][--long true Detail Info Of Each Package].For Example: npm list --global--long true --json.Globally 
Installation Required Only When We Want To Use Package From CommandLine/Used By Every Project We Will Be Work On.Use npm install <PackageName> --global.For Uninstalling Use npm uninstall <PackageName> 
[--save To Remove Package From Package.json As Well][--global To Remove A Global Package].To Install A  Specific Version Of A Package Use Semantic Version[Major[New Functionality WithOut Backward 
Compatability,New Function Signature].Minor[New Feature].Patch[BugFix,Performance Improvement]].Use npm install <Package>@<Version>.If @1.8 Will Be The Latest Version Of 1.8.Also  ">=1.10.10 <1.4.0|| 1.4.1"
These Kind Of Complex Versioning Is Also Possible."^Version" Means  If Package Got Updated New Version Will Be Added In Package.json.To Exclude It From Package.json Use npm install <Package>@<Version> 
--save --save-exact.Just Like ^ Means Latest Version Of The Major Release,~ Means Latest Version Of The Minor Release.Get Package.json From registry.npmjs.org/<PackageName> Ex.registry.npmjs.org/express.
npm prune --production Will Remove All DevDependencies,WithOut This Flag,It Removes Extraneous Package That Is Not Mentioned In Package.json.npm repo <PackageName> For Opening The Source Code Repo In 
Browser.Update npm Using npm install npm@latest  --global With Administrative CommandLine.See https://docs.npmjs.com/misc/scripts For Scripting Section In Package.json.To Run A Script Use npm run <NameKey>.